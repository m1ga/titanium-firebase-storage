/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Titanium SDK
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
package firebase.storage;

import android.net.Uri;

import androidx.annotation.NonNull;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageReference;
import com.google.firebase.storage.UploadTask;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiBlob;
import org.appcelerator.titanium.util.TiConvert;

import java.io.InputStream;


@Kroll.module(name = "TitaniumFirebaseStorage", id = "firebase.storage")
public class TitaniumFirebaseStorageModule extends KrollModule {

    // Standard Debugging variables
    private static final String LCAT = "TitaniumFirebaseStorageModule";
    private static final boolean DBG = TiConfig.LOGD;
    FirebaseStorage storage;
    KrollFunction callback;

    public TitaniumFirebaseStorageModule() {
        super();
    }

    @Kroll.onAppCreate
    public static void onAppCreate(TiApplication app) {
    }

    // Methods
    @Kroll.method
    public void create() {
        storage = FirebaseStorage.getInstance();
    }

    @Kroll.method
    public void upload(KrollDict options) {
        callback = (KrollFunction) options.get("callback");
        TiBlob blob = TiConvert.toBlob(options.get("data"));

        InputStream stream = blob.getInputStream();
        StorageReference storageRef = storage.getReference();
        StorageReference fileRef = storageRef.child(blob.getFile().getName());

        Task uploadTask = fileRef.putStream(stream);
        uploadTask.addOnFailureListener(new OnFailureListener() {
            @Override
            public void onFailure(@NonNull Exception exception) {
                Log.e(LCAT, "Error uploading file: " + exception.getMessage());
                KrollDict event = new KrollDict();
                event.put("success", false);
                callback.callAsync(krollObject, event);
            }
        }).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {
            @Override
            public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {
                if (callback != null) {

                    fileRef.getDownloadUrl().addOnCompleteListener(new OnCompleteListener<Uri>() {
                        @Override
                        public void onComplete(@NonNull Task<Uri> task) {
                            String downloadURL = task.getResult().toString();
                            KrollDict event = new KrollDict();
                            event.put("success", true);
                            event.put("downloadURL", downloadURL);
                            callback.callAsync(krollObject, event);
                        }
                    });
                }
            }
        });
    }
}